from database_utils import DatabaseConnector
import yaml
import psycopg2
from sqlalchemy import create_engine, inspect
import pandas as pd
import tabula
import requests
# from pandasgui import show
from config import header, endpoint_number, endpoint_store
import json
import boto3
import botocore
from botocore import UNSIGNED
from botocore.config import Config

class DataExtractor:
         
    def read_rds_table(self, instance, table_name):                                                 
        engine = instance.init_db_engine()                                                          # Creates the Instance of the engine to connect to RDS via DataConnector
        df = pd.read_sql_table(table_name, engine, index_col='index')                               # Creates pandas DF, index_col ='index' to have just one index col
        return df
    
    def  retrieve_pdf_data(self, link):
        pdf_path = link
        df_pdf = tabula.read_pdf(pdf_path, stream=False, pages='all')                               # Extracts data from pdf and adds all pages into one tabular data file
        df_pdf = pd.concat(df_pdf)                                                                  # Returns pandas DF 
        return df_pdf

    def list_number_of_stores(self, endpoint, header):
        response = requests.get(endpoint, headers=header)                                           # Retrieving data from the API 
        if response.status_code == 200:                                                             # If responce OK, returns the number of stores 
            data = response.json()
            number = data['number_stores']
            return number
        else:
            return f'Request failed with status code: {response.status_code}'                       # If response is not OK, returns response status code

    def retrieve_stores_data(self):
        store_numbers = list(range(1, self.list_number_of_stores(endpoint_number, header)))         # Gives a list of numbers from 1 to the number of stores (451), I tried to add +1 to that number but later there is no data produced for store 451 and gives status code of 500 for it, so I took '+1' off.
        # print(store_numbers)
        stores_data = []                                                                            # Empty list to append all data generated by the for loop 

        for store_number in store_numbers:                                                          # A for loop to iterate through all api addresses and gather the stores data together
            response = requests.get(f'https://aqj7u5id95.execute-api.eu-west-1.amazonaws.com/prod/store_details/{store_number}', headers=header)    # A direct link was used instead of generic argument 'endpoint' to get the store details based on the store number
            if response.status_code == 200:                                                         # If responce is OK, then all data from the loop is appened into the empty list above
                data = json.loads(response.text)
                # print(data)
                stores_data.append(data)
            else:
                print(f"Request failed with status code: {response.status_code}")                   # If responce is not OK, then prints the status code
        
        stores_df = pd.DataFrame(stores_data)                                                       # Creates pandas DF
        
        return stores_df

    def extract_from_s3(self):
        s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))                          # The public acces did not work with my AWS CLI config, so unsigned configuration was used.
        s3.download_file('data-handling-public', 'products.csv', '/Users/eglute/Desktop/AiCore/retail_project/products.csv')

        products = pd.read_csv('products.csv')
        return products
    
    def extract_from_s3_json(self):
        s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))                          # The public acces did not work with my AWS CLI config, so unsigned configuration was used.
        s3.download_file('data-handling-public', 'date_details.json', '/Users/eglute/Desktop/AiCore/retail_project/date_details.json')

        products = pd.read_json('date_details.json')
        return products
      

        

con = DatabaseConnector()
extractor = DataExtractor()

# extractor.read_rds_table(con, "legacy_users")
# extractor.retrieve_pdf_data('https://data-handling-public.s3.eu-west-1.amazonaws.com/card_details.pdf')
# extractor.list_number_of_stores(endpoint_number, header)
# extractor.retrieve_stores_data()
extractor.extract_from_s3_json()


